// src/digitalized-remito/digitalized-remito.controller.ts
import { Controller, Post, Get, Param, UseInterceptors, UploadedFile, Body, Request } from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
// Importa tu Guard de autenticaci칩n si ya lo tienes, ej: import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { DigitalizedRemitoService } from './digitalized-remito.service';
import { ValidationDataDto } from './dto/validation-data.dto'; // 游녣 Importa el DTO
@Controller('digitalized-remito')
export class DigitalizedRemitoController {
  constructor(private readonly remitoService: DigitalizedRemitoService) {}

  // --- A칌ADIR ESTE M칄TODO COMPLETO ---
  @Post('upload')
  @UseInterceptors(FileInterceptor('file')) // 'file' es el nombre clave que la app m칩vil debe usar
  uploadFile(
    @UploadedFile() file: Express.Multer.File,
    @Body('branchId') branchId: string,
    // @Request() req, // Descomenta esto si usas JWT para obtener el usuario del token
  ) {
    // Por ahora, simularemos el ID del usuario. M치s adelante vendr치 del token JWT.
    const userId = '4fc288b2-8c38-4d21-9909-87ae3867dd14'; // <-- Reemplaza con un UUID v치lido de un usuario en tu BD

    return this.remitoService.createInitialRemito(file, userId, branchId);
  }
  @Get('pending/:branchId')
  findPendingByBranch(@Param('branchId') branchId: string) {
    return this.remitoService.findPendingByBranch(branchId);
  }

  // 2. Endpoint para obtener los detalles de UN remito espec칤fico
  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.remitoService.findOne(id);
  }

  // 3. Endpoint para recibir los datos validados y actualizar el stock
  @Post(':id/validate')
  validateRemito(
    @Param('id') id: string, 
    @Body() validationData: ValidationDataDto, // 游녣 Usa el DTO aqu칤
  ) {
    return this.remitoService.validateAndFinalizeRemito(id, validationData);
  }

}